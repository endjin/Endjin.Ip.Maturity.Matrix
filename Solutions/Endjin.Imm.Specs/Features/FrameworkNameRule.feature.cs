// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Endjin.Imm.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FrameworkNameRule")]
    public partial class FrameworkNameRuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FrameworkNameRule.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FrameworkNameRule", "\tIn order to detect when some aspect of IP is stale\r\n\tAs a developer looking at s" +
                    "ome IP\r\n\tI want supported framework version measures to be accurate even if the " +
                    "maturity matrix has not been updated in a long while", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Score",
                        "Framework",
                        "Description"});
            table2.AddRow(new string[] {
                        "3",
                        "netcoreapp6.0",
                        "Using the most current LTS version"});
            table2.AddRow(new string[] {
                        "2",
                        "netcoreapp3.1",
                        "Using a LTS version"});
            table2.AddRow(new string[] {
                        "2",
                        "netcoreapp2.1",
                        "Using a LTS version"});
            table2.AddRow(new string[] {
                        "3",
                        "node14",
                        "Using the most current LTS version"});
            table2.AddRow(new string[] {
                        "3",
                        "node12",
                        "Using the most current LTS version"});
            table2.AddRow(new string[] {
                        "2",
                        "node10",
                        "Using a LTS version"});
            table2.AddRow(new string[] {
                        "2",
                        "node8",
                        "Using a LTS version"});
            table2.AddRow(new string[] {
                        "1",
                        "\'*\'",
                        "Using an unsupported version"});
            table2.AddRow(new string[] {
                        "0",
                        "",
                        "None"});
#line 8
    testRunner.Given("I have a rule named \'Framework Version\' with id \'6c0402b3-f0e3-4bd7-83fe-04bb6dca" +
                    "7924\' and DataType \'Framework\'", ((string)(null)), table2, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Most current version")]
        [NUnit.Framework.TestCaseAttribute("netcoreapp6.0", null)]
        [NUnit.Framework.TestCaseAttribute("node14", null)]
        [NUnit.Framework.TestCaseAttribute("node12", null)]
        public virtual void MostCurrentVersion(string framework, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Most current version", null, exampleTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 22
    testRunner.Given(string.Format("my IMM has an entry named \'Framework Version\' with id \'6c0402b3-f0e3-4bd7-83fe-04" +
                            "bb6dca7924\' with a Framework of \'{0}\'", framework), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
    testRunner.Then("the score for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.Then("the percentage for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supported LTS version")]
        [NUnit.Framework.TestCaseAttribute("netcoreapp3.1", null)]
        [NUnit.Framework.TestCaseAttribute("netcoreapp2.1", null)]
        [NUnit.Framework.TestCaseAttribute("node10", null)]
        [NUnit.Framework.TestCaseAttribute("node8", null)]
        public virtual void SupportedLTSVersion(string framework, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supported LTS version", null, exampleTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 46
    testRunner.Given(string.Format("my IMM has an entry named \'Framework Version\' with id \'6c0402b3-f0e3-4bd7-83fe-04" +
                            "bb6dca7924\' with a Framework of \'{0}\'", framework), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
    testRunner.Then("the score for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.Then("the percentage for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 67", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsupported version")]
        [NUnit.Framework.TestCaseAttribute("netcoreapp2.0", null)]
        [NUnit.Framework.TestCaseAttribute("node13", null)]
        [NUnit.Framework.TestCaseAttribute("node11", null)]
        [NUnit.Framework.TestCaseAttribute("node7", null)]
        [NUnit.Framework.TestCaseAttribute("node6", null)]
        public virtual void UnsupportedVersion(string framework, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsupported version", null, exampleTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 59
    testRunner.Given(string.Format("my IMM has an entry named \'Framework Version\' with id \'6c0402b3-f0e3-4bd7-83fe-04" +
                            "bb6dca7924\' with a Framework of \'{0}\'", framework), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("the score for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.Then("the percentage for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be 33", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Legacy format")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "None", null)]
        [NUnit.Framework.TestCaseAttribute("1", "33", "Using an unsupported version", null)]
        [NUnit.Framework.TestCaseAttribute("2", "66", "Using a LTS version", null)]
        [NUnit.Framework.TestCaseAttribute("3", "100", "Using the most current LTS version", null)]
        public virtual void LegacyFormat(string score, string percentage, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Legacy format", null, exampleTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 73
    testRunner.Given(string.Format("my IMM has an entry named \'Framework Version\' with id \'6c0402b3-f0e3-4bd7-83fe-04" +
                            "bb6dca7924\' with a Score of {0} and description of \'{1}\'", score, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
    testRunner.Then(string.Format("the score for the \'6c0402b3-f0e3-4bd7-83fe-04bb6dca7924\' rule should be {0}", score), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
