// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Endjin.Imm.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OptionalMeasure")]
    public partial class OptionalMeasureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "OptionalMeasure.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "OptionalMeasure", "    In order to represent the maturity of some IP is stale\r\n    As a developer lo" +
                    "oking at some IP\r\n    I want to be able to exclude measures from the IMM if they" +
                    " are not applicable to the project at hand without distorting scores", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Score",
                        "Description",
                        "CanOptOut"});
            table5.AddRow(new string[] {
                        "0",
                        "None",
                        ""});
            table5.AddRow(new string[] {
                        "1",
                        "Scripted and Documented",
                        ""});
            table5.AddRow(new string[] {
                        "1",
                        "Templated",
                        ""});
            table5.AddRow(new string[] {
                        "1",
                        "Multi-tenanted - as a Service",
                        "true"});
#line 7
    testRunner.Given("I have a rule named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' a" +
                    "nd DataType \'Continuous\'", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Score",
                        "Description"});
            table6.AddRow(new string[] {
                        "0",
                        "None"});
            table6.AddRow(new string[] {
                        "1",
                        "Configured"});
#line 13
    testRunner.And("I have a rule named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4161-8f" +
                    "dd-b468a1eb185d\' and DataType \'Discrete\'", ((string)(null)), table6, "And ");
#line hidden
#line 17
    testRunner.And("I load the rules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All measures present and full marks")]
        public void AllMeasuresPresentAndFullMarks()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All measures present and full marks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description"});
                table7.AddRow(new string[] {
                            "1",
                            "Scripted and Documented"});
                table7.AddRow(new string[] {
                            "1",
                            "Templated"});
                table7.AddRow(new string[] {
                            "1",
                            "Multi-tenanted - as a Service"});
#line 20
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table7, "Given ");
#line hidden
#line 25
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 1 and description of \'Configured\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.Then("the evalution total score should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.And("the evalution maximum possible score should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All measures present and marks for all but optional measure")]
        public void AllMeasuresPresentAndMarksForAllButOptionalMeasure()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All measures present and marks for all but optional measure", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description"});
                table8.AddRow(new string[] {
                            "1",
                            "Scripted and Documented"});
                table8.AddRow(new string[] {
                            "1",
                            "Templated"});
#line 35
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table8, "Given ");
#line hidden
#line 39
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 1 and description of \'Configured\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 67", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.Then("the evalution total score should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("the evalution maximum possible score should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Optional measure opted out of and marks for all remaining measures")]
        public void OptionalMeasureOptedOutOfAndMarksForAllRemainingMeasures()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Optional measure opted out of and marks for all remaining measures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description",
                            "OptOut"});
                table9.AddRow(new string[] {
                            "1",
                            "Scripted and Documented",
                            ""});
                table9.AddRow(new string[] {
                            "1",
                            "Templated",
                            ""});
                table9.AddRow(new string[] {
                            "",
                            "Multi-tenanted - as a Service",
                            "true"});
#line 49
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table9, "Given ");
#line hidden
#line 54
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 1 and description of \'Configured\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.Then("the evalution total score should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("the evalution maximum possible score should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No opt out some measures not present")]
        public void NoOptOutSomeMeasuresNotPresent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No opt out some measures not present", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description"});
                table10.AddRow(new string[] {
                            "1",
                            "Scripted and Documented"});
#line 64
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table10, "Given ");
#line hidden
#line 67
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 1 and description of \'Configured\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 33", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.Then("the evalution total score should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.And("the evalution maximum possible score should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Optional measure opted out of and some measures not present")]
        public void OptionalMeasureOptedOutOfAndSomeMeasuresNotPresent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Optional measure opted out of and some measures not present", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description",
                            "OptOut"});
                table11.AddRow(new string[] {
                            "1",
                            "Scripted and Documented",
                            ""});
                table11.AddRow(new string[] {
                            "",
                            "Multi-tenanted - as a Service",
                            "true"});
#line 77
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table11, "Given ");
#line hidden
#line 81
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 1 and description of \'Configured\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.Then("the evalution total score should be 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.And("the evalution maximum possible score should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No opt out no points")]
        public void NoOptOutNoPoints()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No opt out no points", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description"});
                table12.AddRow(new string[] {
                            "0",
                            "None"});
#line 91
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table12, "Given ");
#line hidden
#line 94
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 0 and description of \'None\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.Then("the evalution total score should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.And("the evalution maximum possible score should be 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Optional measure opted out of and no points")]
        public void OptionalMeasureOptedOutOfAndNoPoints()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Optional measure opted out of and no points", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score",
                            "Description",
                            "OptOut"});
                table13.AddRow(new string[] {
                            "",
                            "Multi-tenanted - as a Service",
                            "true"});
#line 104
    testRunner.Given("my IMM has an entry named \'Deployment\' with id \'edea4593-d2dd-485b-bc1b-aaaf18f09" +
                        "8f9\' and these measures", ((string)(null)), table13, "Given ");
#line hidden
#line 107
    testRunner.Given("my IMM has an entry named \'Shared Engineering Standards\' with id \'74e29f9b-6dca-4" +
                        "161-8fdd-b468a1eb185d\' with a Score of 0 and description of \'None\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
    testRunner.When("I evaluate the IMM", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
    testRunner.Then("the score for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.And("the percentage for the \'edea4593-d2dd-485b-bc1b-aaaf18f098f9\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.Then("the score for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
    testRunner.And("the percentage for the \'74e29f9b-6dca-4161-8fdd-b468a1eb185d\' rule should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.Then("the evalution total score should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("the evalution maximum possible score should be 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
